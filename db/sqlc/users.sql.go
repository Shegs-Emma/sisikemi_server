// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  first_name,
  last_name,
  phone_number,
  profile_photo,
  email,
  is_admin
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING username, hashed_password, first_name, last_name, phone_number, profile_photo, email, is_admin, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	PhoneNumber    string `json:"phone_number"`
	ProfilePhoto   string `json:"profile_photo"`
	Email          string `json:"email"`
	IsAdmin        bool   `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ProfilePhoto,
		arg.Email,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ProfilePhoto,
		&i.Email,
		&i.IsAdmin,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, first_name, last_name, phone_number, profile_photo, email, is_admin, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ProfilePhoto,
		&i.Email,
		&i.IsAdmin,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
