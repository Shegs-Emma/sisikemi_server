// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    ref_no,
    username,
    amount,
    payment_method,
    order_status,
    shipping_method,
    shipping_address_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, ref_no, username, amount, payment_method, order_status, last_updated_at, created_at, shipping_method, shipping_address_id
`

type CreateOrderParams struct {
	RefNo             string      `json:"ref_no"`
	Username          string      `json:"username"`
	Amount            int64       `json:"amount"`
	PaymentMethod     string      `json:"payment_method"`
	OrderStatus       OrderStatus `json:"order_status"`
	ShippingMethod    string      `json:"shipping_method"`
	ShippingAddressID int64       `json:"shipping_address_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.RefNo,
		arg.Username,
		arg.Amount,
		arg.PaymentMethod,
		arg.OrderStatus,
		arg.ShippingMethod,
		arg.ShippingAddressID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.Username,
		&i.Amount,
		&i.PaymentMethod,
		&i.OrderStatus,
		&i.LastUpdatedAt,
		&i.CreatedAt,
		&i.ShippingMethod,
		&i.ShippingAddressID,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, ref_no, username, amount, payment_method, order_status, last_updated_at, created_at, shipping_method, shipping_address_id FROM orders
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.Username,
		&i.Amount,
		&i.PaymentMethod,
		&i.OrderStatus,
		&i.LastUpdatedAt,
		&i.CreatedAt,
		&i.ShippingMethod,
		&i.ShippingAddressID,
	)
	return i, err
}

const getUserOrders = `-- name: GetUserOrders :many
SELECT id, ref_no, username, amount, payment_method, order_status, last_updated_at, created_at, shipping_method, shipping_address_id FROM orders
WHERE username = $1
ORDER BY id
LIMIT $2
`

type GetUserOrdersParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetUserOrders(ctx context.Context, arg GetUserOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getUserOrders, arg.Username, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Username,
			&i.Amount,
			&i.PaymentMethod,
			&i.OrderStatus,
			&i.LastUpdatedAt,
			&i.CreatedAt,
			&i.ShippingMethod,
			&i.ShippingAddressID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, ref_no, username, amount, payment_method, order_status, last_updated_at, created_at, shipping_method, shipping_address_id FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Username,
			&i.Amount,
			&i.PaymentMethod,
			&i.OrderStatus,
			&i.LastUpdatedAt,
			&i.CreatedAt,
			&i.ShippingMethod,
			&i.ShippingAddressID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
