// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart (
    product_id, 
    product_name,
    user_ref_id,
    product_price, 
    product_quantity,
    product_image,
    product_color,
    product_size
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id
`

type CreateCartItemParams struct {
	ProductID       int32  `json:"product_id"`
	ProductName     string `json:"product_name"`
	UserRefID       int64  `json:"user_ref_id"`
	ProductPrice    int64  `json:"product_price"`
	ProductQuantity int64  `json:"product_quantity"`
	ProductImage    string `json:"product_image"`
	ProductColor    string `json:"product_color"`
	ProductSize     string `json:"product_size"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ProductID,
		arg.ProductName,
		arg.UserRefID,
		arg.ProductPrice,
		arg.ProductQuantity,
		arg.ProductImage,
		arg.ProductColor,
		arg.ProductSize,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductImage,
		&i.ProductColor,
		&i.ProductSize,
		&i.CreatedAt,
		&i.UserRefID,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart
WHERE product_id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, productID int32) error {
	_, err := q.db.Exec(ctx, deleteCartItem, productID)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id FROM cart
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCartItem(ctx context.Context, id int64) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductImage,
		&i.ProductColor,
		&i.ProductSize,
		&i.CreatedAt,
		&i.UserRefID,
	)
	return i, err
}

const getCartItemByProductId = `-- name: GetCartItemByProductId :one
SELECT id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id FROM cart
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetCartItemByProductId(ctx context.Context, productID int32) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartItemByProductId, productID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductImage,
		&i.ProductColor,
		&i.ProductSize,
		&i.CreatedAt,
		&i.UserRefID,
	)
	return i, err
}

const getCartItemByUser = `-- name: GetCartItemByUser :one
SELECT id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id FROM cart
WHERE user_ref_id = $1 LIMIT 1
`

func (q *Queries) GetCartItemByUser(ctx context.Context, userRefID int64) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartItemByUser, userRefID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductImage,
		&i.ProductColor,
		&i.ProductSize,
		&i.CreatedAt,
		&i.UserRefID,
	)
	return i, err
}

const listCartItems = `-- name: ListCartItems :many
SELECT id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id FROM cart
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCartItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCartItems(ctx context.Context, arg ListCartItemsParams) ([]Cart, error) {
	rows, err := q.db.Query(ctx, listCartItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductQuantity,
			&i.ProductImage,
			&i.ProductColor,
			&i.ProductSize,
			&i.CreatedAt,
			&i.UserRefID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserCartItems = `-- name: ListUserCartItems :many
SELECT id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id FROM cart
WHERE user_ref_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserCartItemsParams struct {
	UserRefID int64 `json:"user_ref_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListUserCartItems(ctx context.Context, arg ListUserCartItemsParams) ([]Cart, error) {
	rows, err := q.db.Query(ctx, listUserCartItems, arg.UserRefID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductQuantity,
			&i.ProductImage,
			&i.ProductColor,
			&i.ProductSize,
			&i.CreatedAt,
			&i.UserRefID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQty = `-- name: UpdateCartItemQty :one
UPDATE cart
SET
    product_quantity = COALESCE($1, product_quantity)
WHERE
    id = $2
RETURNING id, product_id, product_name, product_price, product_quantity, product_image, product_color, product_size, created_at, user_ref_id
`

type UpdateCartItemQtyParams struct {
	ProductQuantity pgtype.Int8 `json:"product_quantity"`
	ID              int64       `json:"id"`
}

func (q *Queries) UpdateCartItemQty(ctx context.Context, arg UpdateCartItemQtyParams) (Cart, error) {
	row := q.db.QueryRow(ctx, updateCartItemQty, arg.ProductQuantity, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductImage,
		&i.ProductColor,
		&i.ProductSize,
		&i.CreatedAt,
		&i.UserRefID,
	)
	return i, err
}
