// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_media.sql

package db

import (
	"context"
)

const createProductMedia = `-- name: CreateProductMedia :one
INSERT INTO product_media (
    product_media_ref,
    product_id,
    is_main_image,
    media_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, product_media_ref, product_id, is_main_image, media_id
`

type CreateProductMediaParams struct {
	ProductMediaRef string `json:"product_media_ref"`
	ProductID       string `json:"product_id"`
	IsMainImage     bool   `json:"is_main_image"`
	MediaID         string `json:"media_id"`
}

func (q *Queries) CreateProductMedia(ctx context.Context, arg CreateProductMediaParams) (ProductMedium, error) {
	row := q.db.QueryRow(ctx, createProductMedia,
		arg.ProductMediaRef,
		arg.ProductID,
		arg.IsMainImage,
		arg.MediaID,
	)
	var i ProductMedium
	err := row.Scan(
		&i.ID,
		&i.ProductMediaRef,
		&i.ProductID,
		&i.IsMainImage,
		&i.MediaID,
	)
	return i, err
}

const getProductMedia = `-- name: GetProductMedia :one
SELECT id, product_media_ref, product_id, is_main_image, media_id FROM product_media
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductMedia(ctx context.Context, id int64) (ProductMedium, error) {
	row := q.db.QueryRow(ctx, getProductMedia, id)
	var i ProductMedium
	err := row.Scan(
		&i.ID,
		&i.ProductMediaRef,
		&i.ProductID,
		&i.IsMainImage,
		&i.MediaID,
	)
	return i, err
}

const getProductMediaByRef = `-- name: GetProductMediaByRef :one
SELECT id, product_media_ref, product_id, is_main_image, media_id FROM product_media
WHERE product_media_ref = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductMediaByRef(ctx context.Context, productMediaRef string) (ProductMedium, error) {
	row := q.db.QueryRow(ctx, getProductMediaByRef, productMediaRef)
	var i ProductMedium
	err := row.Scan(
		&i.ID,
		&i.ProductMediaRef,
		&i.ProductID,
		&i.IsMainImage,
		&i.MediaID,
	)
	return i, err
}

const getProductsMedium = `-- name: GetProductsMedium :many
SELECT id, product_media_ref, product_id, is_main_image, media_id FROM product_media
WHERE product_id = $1
ORDER BY id
LIMIT $2
`

type GetProductsMediumParams struct {
	ProductID string `json:"product_id"`
	Limit     int32  `json:"limit"`
}

func (q *Queries) GetProductsMedium(ctx context.Context, arg GetProductsMediumParams) ([]ProductMedium, error) {
	rows, err := q.db.Query(ctx, getProductsMedium, arg.ProductID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductMedium{}
	for rows.Next() {
		var i ProductMedium
		if err := rows.Scan(
			&i.ID,
			&i.ProductMediaRef,
			&i.ProductID,
			&i.IsMainImage,
			&i.MediaID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductMedia = `-- name: ListProductMedia :many
SELECT id, product_media_ref, product_id, is_main_image, media_id FROM product_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductMedia(ctx context.Context, arg ListProductMediaParams) ([]ProductMedium, error) {
	rows, err := q.db.Query(ctx, listProductMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductMedium{}
	for rows.Next() {
		var i ProductMedium
		if err := rows.Scan(
			&i.ID,
			&i.ProductMediaRef,
			&i.ProductID,
			&i.IsMainImage,
			&i.MediaID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
