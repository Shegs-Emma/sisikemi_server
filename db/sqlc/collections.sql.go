// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package db

import (
	"context"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (
    collection_name
) VALUES (
    $1
)
RETURNING id, collection_name, last_updated_at, created_at
`

func (q *Queries) CreateCollection(ctx context.Context, collectionName string) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection, collectionName)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CollectionName,
		&i.LastUpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCollection = `-- name: GetCollection :one
SELECT id, collection_name, last_updated_at, created_at FROM collections
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetCollection(ctx context.Context, id int64) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CollectionName,
		&i.LastUpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCollection = `-- name: ListCollection :many
SELECT id, collection_name, last_updated_at, created_at FROM collections
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCollectionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCollection(ctx context.Context, arg ListCollectionParams) ([]Collection, error) {
	rows, err := q.db.Query(ctx, listCollection, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.CollectionName,
			&i.LastUpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
