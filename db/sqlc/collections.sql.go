// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (
    collection_name,
    collection_description,
    product_count,
    thumbnail_image,
    header_image
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, collection_name, collection_description, product_count, thumbnail_image, header_image, last_updated_at, created_at
`

type CreateCollectionParams struct {
	CollectionName        string      `json:"collection_name"`
	CollectionDescription string      `json:"collection_description"`
	ProductCount          pgtype.Int8 `json:"product_count"`
	ThumbnailImage        string      `json:"thumbnail_image"`
	HeaderImage           string      `json:"header_image"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection,
		arg.CollectionName,
		arg.CollectionDescription,
		arg.ProductCount,
		arg.ThumbnailImage,
		arg.HeaderImage,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CollectionName,
		&i.CollectionDescription,
		&i.ProductCount,
		&i.ThumbnailImage,
		&i.HeaderImage,
		&i.LastUpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCollection = `-- name: GetCollection :one
SELECT id, collection_name, collection_description, product_count, thumbnail_image, header_image, last_updated_at, created_at FROM collections
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetCollection(ctx context.Context, id int64) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CollectionName,
		&i.CollectionDescription,
		&i.ProductCount,
		&i.ThumbnailImage,
		&i.HeaderImage,
		&i.LastUpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCollection = `-- name: ListCollection :many
SELECT id, collection_name, collection_description, product_count, thumbnail_image, header_image, last_updated_at, created_at FROM collections
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCollectionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCollection(ctx context.Context, arg ListCollectionParams) ([]Collection, error) {
	rows, err := q.db.Query(ctx, listCollection, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.CollectionName,
			&i.CollectionDescription,
			&i.ProductCount,
			&i.ThumbnailImage,
			&i.HeaderImage,
			&i.LastUpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :one
UPDATE collections
SET
  collection_name = COALESCE($1, collection_name),
  collection_description = COALESCE($2, collection_description),
  product_count = COALESCE($3, product_count),
  thumbnail_image = COALESCE($4, thumbnail_image),
  header_image = COALESCE($5, header_image)
WHERE
  id = $6
RETURNING id, collection_name, collection_description, product_count, thumbnail_image, header_image, last_updated_at, created_at
`

type UpdateCollectionParams struct {
	CollectionName        pgtype.Text `json:"collection_name"`
	CollectionDescription pgtype.Text `json:"collection_description"`
	ProductCount          pgtype.Int8 `json:"product_count"`
	ThumbnailImage        pgtype.Text `json:"thumbnail_image"`
	HeaderImage           pgtype.Text `json:"header_image"`
	ID                    int64       `json:"id"`
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, updateCollection,
		arg.CollectionName,
		arg.CollectionDescription,
		arg.ProductCount,
		arg.ThumbnailImage,
		arg.HeaderImage,
		arg.ID,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.CollectionName,
		&i.CollectionDescription,
		&i.ProductCount,
		&i.ThumbnailImage,
		&i.HeaderImage,
		&i.LastUpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
