// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusShipped   OrderStatus = "shipped"
	OrderStatusDelivered OrderStatus = "delivered"
	OrderStatusCancelled OrderStatus = "cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type ProductStatus string

const (
	ProductStatusAvailable    ProductStatus = "available"
	ProductStatusOutOfStock   ProductStatus = "out_of_stock"
	ProductStatusDiscontinued ProductStatus = "discontinued"
)

func (e *ProductStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductStatus(s)
	case string:
		*e = ProductStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductStatus: %T", src)
	}
	return nil
}

type NullProductStatus struct {
	ProductStatus ProductStatus `json:"product_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProductStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductStatus), nil
}

type Collection struct {
	ID             int64     `json:"id"`
	CollectionName string    `json:"collection_name"`
	LastUpdatedAt  time.Time `json:"last_updated_at"`
	CreatedAt      time.Time `json:"created_at"`
}

type Medium struct {
	ID        int64     `json:"id"`
	MediaRef  string    `json:"media_ref"`
	Url       string    `json:"url"`
	AwsID     string    `json:"aws_id"`
	CreatedAt time.Time `json:"created_at"`
}

type Order struct {
	ID       int64       `json:"id"`
	RefNo    pgtype.Text `json:"ref_no"`
	Username string      `json:"username"`
	// it must be positive
	Amount        int64       `json:"amount"`
	PaymentMethod string      `json:"payment_method"`
	Product       string      `json:"product"`
	OrderStatus   OrderStatus `json:"order_status"`
	LastUpdatedAt time.Time   `json:"last_updated_at"`
	CreatedAt     time.Time   `json:"created_at"`
}

type Product struct {
	ID            int64          `json:"id"`
	ProductRefNo  string         `json:"product_ref_no"`
	ProductName   string         `json:"product_name"`
	Price         pgtype.Numeric `json:"price"`
	ProductImages string         `json:"product_images"`
	Collection    int64          `json:"collection"`
	Quantity      int32          `json:"quantity"`
	Status        ProductStatus  `json:"status"`
	LastUpdatedAt time.Time      `json:"last_updated_at"`
	CreatedAt     time.Time      `json:"created_at"`
}

type ProductMedium struct {
	ID              int64  `json:"id"`
	ProductMediaRef string `json:"product_media_ref"`
	ProductID       string `json:"product_id"`
	MediaID         string `json:"media_id"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FirstName         string    `json:"first_name"`
	LastName          string    `json:"last_name"`
	PhoneNumber       string    `json:"phone_number"`
	ProfilePhoto      string    `json:"profile_photo"`
	Email             string    `json:"email"`
	IsAdmin           bool      `json:"is_admin"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
	IsEmailVerified   bool      `json:"is_email_verified"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
