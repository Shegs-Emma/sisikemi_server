// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/techschool/simplebank/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/techschool/simplebank/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCartItem mocks base method.
func (m *MockStore) CreateCartItem(arg0 context.Context, arg1 db.CreateCartItemParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartItem indicates an expected call of CreateCartItem.
func (mr *MockStoreMockRecorder) CreateCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockStore)(nil).CreateCartItem), arg0, arg1)
}

// CreateCollection mocks base method.
func (m *MockStore) CreateCollection(arg0 context.Context, arg1 db.CreateCollectionParams) (db.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", arg0, arg1)
	ret0, _ := ret[0].(db.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockStoreMockRecorder) CreateCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockStore)(nil).CreateCollection), arg0, arg1)
}

// CreateMedia mocks base method.
func (m *MockStore) CreateMedia(arg0 context.Context, arg1 db.CreateMediaParams) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMedia", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMedia indicates an expected call of CreateMedia.
func (mr *MockStoreMockRecorder) CreateMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMedia", reflect.TypeOf((*MockStore)(nil).CreateMedia), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderTxParams) (db.CreateOrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateOrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateProductMedia mocks base method.
func (m *MockStore) CreateProductMedia(arg0 context.Context, arg1 db.CreateProductMediaParams) (db.ProductMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductMedia", arg0, arg1)
	ret0, _ := ret[0].(db.ProductMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductMedia indicates an expected call of CreateProductMedia.
func (mr *MockStoreMockRecorder) CreateProductMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductMedia", reflect.TypeOf((*MockStore)(nil).CreateProductMedia), arg0, arg1)
}

// CreateProductTx mocks base method.
func (m *MockStore) CreateProductTx(arg0 context.Context, arg1 db.CreateProductTxParams) (db.CreateProductTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateProductTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductTx indicates an expected call of CreateProductTx.
func (mr *MockStoreMockRecorder) CreateProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductTx", reflect.TypeOf((*MockStore)(nil).CreateProductTx), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateShippingAddress mocks base method.
func (m *MockStore) CreateShippingAddress(arg0 context.Context, arg1 db.CreateShippingAddressParams) (db.ShippingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShippingAddress", arg0, arg1)
	ret0, _ := ret[0].(db.ShippingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShippingAddress indicates an expected call of CreateShippingAddress.
func (mr *MockStoreMockRecorder) CreateShippingAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShippingAddress", reflect.TypeOf((*MockStore)(nil).CreateShippingAddress), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteCartItem mocks base method.
func (m *MockStore) DeleteCartItem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockStoreMockRecorder) DeleteCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockStore)(nil).DeleteCartItem), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteProductMedia mocks base method.
func (m *MockStore) DeleteProductMedia(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductMedia indicates an expected call of DeleteProductMedia.
func (mr *MockStoreMockRecorder) DeleteProductMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductMedia", reflect.TypeOf((*MockStore)(nil).DeleteProductMedia), arg0, arg1)
}

// DeleteProductTx mocks base method.
func (m *MockStore) DeleteProductTx(arg0 context.Context, arg1 db.DeleteProductTxParams) (db.DeleteProductTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductTx", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteProductTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductTx indicates an expected call of DeleteProductTx.
func (mr *MockStoreMockRecorder) DeleteProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductTx", reflect.TypeOf((*MockStore)(nil).DeleteProductTx), arg0, arg1)
}

// ForgotPasswordTx mocks base method.
func (m *MockStore) ForgotPasswordTx(arg0 context.Context, arg1 db.ForgotPasswordTxParams) (db.ForgotPasswordTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordTx", arg0, arg1)
	ret0, _ := ret[0].(db.ForgotPasswordTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPasswordTx indicates an expected call of ForgotPasswordTx.
func (mr *MockStoreMockRecorder) ForgotPasswordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordTx", reflect.TypeOf((*MockStore)(nil).ForgotPasswordTx), arg0, arg1)
}

// GetCartItem mocks base method.
func (m *MockStore) GetCartItem(arg0 context.Context, arg1 int64) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockStoreMockRecorder) GetCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockStore)(nil).GetCartItem), arg0, arg1)
}

// GetCartItemByProductId mocks base method.
func (m *MockStore) GetCartItemByProductId(arg0 context.Context, arg1 int32) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByProductId", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByProductId indicates an expected call of GetCartItemByProductId.
func (mr *MockStoreMockRecorder) GetCartItemByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByProductId", reflect.TypeOf((*MockStore)(nil).GetCartItemByProductId), arg0, arg1)
}

// GetCartItemByUser mocks base method.
func (m *MockStore) GetCartItemByUser(arg0 context.Context, arg1 int64) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByUser", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByUser indicates an expected call of GetCartItemByUser.
func (mr *MockStoreMockRecorder) GetCartItemByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByUser", reflect.TypeOf((*MockStore)(nil).GetCartItemByUser), arg0, arg1)
}

// GetCollection mocks base method.
func (m *MockStore) GetCollection(arg0 context.Context, arg1 int64) (db.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", arg0, arg1)
	ret0, _ := ret[0].(db.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockStoreMockRecorder) GetCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockStore)(nil).GetCollection), arg0, arg1)
}

// GetMedia mocks base method.
func (m *MockStore) GetMedia(arg0 context.Context, arg1 int64) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMedia", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMedia indicates an expected call of GetMedia.
func (mr *MockStoreMockRecorder) GetMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMedia", reflect.TypeOf((*MockStore)(nil).GetMedia), arg0, arg1)
}

// GetMediaByRef mocks base method.
func (m *MockStore) GetMediaByRef(arg0 context.Context, arg1 string) (db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaByRef", arg0, arg1)
	ret0, _ := ret[0].(db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaByRef indicates an expected call of GetMediaByRef.
func (mr *MockStoreMockRecorder) GetMediaByRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaByRef", reflect.TypeOf((*MockStore)(nil).GetMediaByRef), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrderItem mocks base method.
func (m *MockStore) GetOrderItem(arg0 context.Context, arg1 int64) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem.
func (mr *MockStoreMockRecorder) GetOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockStore)(nil).GetOrderItem), arg0, arg1)
}

// GetOrderItemsForOrder mocks base method.
func (m *MockStore) GetOrderItemsForOrder(arg0 context.Context, arg1 db.GetOrderItemsForOrderParams) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsForOrder", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsForOrder indicates an expected call of GetOrderItemsForOrder.
func (mr *MockStoreMockRecorder) GetOrderItemsForOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsForOrder", reflect.TypeOf((*MockStore)(nil).GetOrderItemsForOrder), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProductMedia mocks base method.
func (m *MockStore) GetProductMedia(arg0 context.Context, arg1 int64) (db.ProductMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductMedia", arg0, arg1)
	ret0, _ := ret[0].(db.ProductMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductMedia indicates an expected call of GetProductMedia.
func (mr *MockStoreMockRecorder) GetProductMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductMedia", reflect.TypeOf((*MockStore)(nil).GetProductMedia), arg0, arg1)
}

// GetProductMediaByRef mocks base method.
func (m *MockStore) GetProductMediaByRef(arg0 context.Context, arg1 string) (db.ProductMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductMediaByRef", arg0, arg1)
	ret0, _ := ret[0].(db.ProductMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductMediaByRef indicates an expected call of GetProductMediaByRef.
func (mr *MockStoreMockRecorder) GetProductMediaByRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductMediaByRef", reflect.TypeOf((*MockStore)(nil).GetProductMediaByRef), arg0, arg1)
}

// GetProductsMedium mocks base method.
func (m *MockStore) GetProductsMedium(arg0 context.Context, arg1 db.GetProductsMediumParams) ([]db.ProductMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsMedium", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsMedium indicates an expected call of GetProductsMedium.
func (mr *MockStoreMockRecorder) GetProductsMedium(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsMedium", reflect.TypeOf((*MockStore)(nil).GetProductsMedium), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetShippingAddress mocks base method.
func (m *MockStore) GetShippingAddress(arg0 context.Context, arg1 int64) (db.ShippingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingAddress", arg0, arg1)
	ret0, _ := ret[0].(db.ShippingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingAddress indicates an expected call of GetShippingAddress.
func (mr *MockStoreMockRecorder) GetShippingAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingAddress", reflect.TypeOf((*MockStore)(nil).GetShippingAddress), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserOrders mocks base method.
func (m *MockStore) GetUserOrders(arg0 context.Context, arg1 db.GetUserOrdersParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockStoreMockRecorder) GetUserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockStore)(nil).GetUserOrders), arg0, arg1)
}

// GetUserShippingAddresses mocks base method.
func (m *MockStore) GetUserShippingAddresses(arg0 context.Context, arg1 db.GetUserShippingAddressesParams) ([]db.ShippingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserShippingAddresses", arg0, arg1)
	ret0, _ := ret[0].([]db.ShippingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserShippingAddresses indicates an expected call of GetUserShippingAddresses.
func (mr *MockStoreMockRecorder) GetUserShippingAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserShippingAddresses", reflect.TypeOf((*MockStore)(nil).GetUserShippingAddresses), arg0, arg1)
}

// ListCartItems mocks base method.
func (m *MockStore) ListCartItems(arg0 context.Context, arg1 db.ListCartItemsParams) ([]db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartItems", arg0, arg1)
	ret0, _ := ret[0].([]db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartItems indicates an expected call of ListCartItems.
func (mr *MockStoreMockRecorder) ListCartItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartItems", reflect.TypeOf((*MockStore)(nil).ListCartItems), arg0, arg1)
}

// ListCollection mocks base method.
func (m *MockStore) ListCollection(arg0 context.Context, arg1 db.ListCollectionParams) ([]db.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollection", arg0, arg1)
	ret0, _ := ret[0].([]db.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollection indicates an expected call of ListCollection.
func (mr *MockStoreMockRecorder) ListCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollection", reflect.TypeOf((*MockStore)(nil).ListCollection), arg0, arg1)
}

// ListMedia mocks base method.
func (m *MockStore) ListMedia(arg0 context.Context, arg1 db.ListMediaParams) ([]db.Medium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.Medium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMedia indicates an expected call of ListMedia.
func (mr *MockStoreMockRecorder) ListMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMedia", reflect.TypeOf((*MockStore)(nil).ListMedia), arg0, arg1)
}

// ListOrderItems mocks base method.
func (m *MockStore) ListOrderItems(arg0 context.Context, arg1 db.ListOrderItemsParams) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderItems", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderItems indicates an expected call of ListOrderItems.
func (mr *MockStoreMockRecorder) ListOrderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderItems", reflect.TypeOf((*MockStore)(nil).ListOrderItems), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context, arg1 db.ListOrdersParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0, arg1)
}

// ListProductMedia mocks base method.
func (m *MockStore) ListProductMedia(arg0 context.Context, arg1 db.ListProductMediaParams) ([]db.ProductMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductMedia", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductMedia indicates an expected call of ListProductMedia.
func (mr *MockStoreMockRecorder) ListProductMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductMedia", reflect.TypeOf((*MockStore)(nil).ListProductMedia), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// ListShippingAddresses mocks base method.
func (m *MockStore) ListShippingAddresses(arg0 context.Context, arg1 db.ListShippingAddressesParams) ([]db.ShippingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShippingAddresses", arg0, arg1)
	ret0, _ := ret[0].([]db.ShippingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShippingAddresses indicates an expected call of ListShippingAddresses.
func (mr *MockStoreMockRecorder) ListShippingAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShippingAddresses", reflect.TypeOf((*MockStore)(nil).ListShippingAddresses), arg0, arg1)
}

// ListUserCartItems mocks base method.
func (m *MockStore) ListUserCartItems(arg0 context.Context, arg1 db.ListUserCartItemsParams) ([]db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCartItems", arg0, arg1)
	ret0, _ := ret[0].([]db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCartItems indicates an expected call of ListUserCartItems.
func (mr *MockStoreMockRecorder) ListUserCartItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCartItems", reflect.TypeOf((*MockStore)(nil).ListUserCartItems), arg0, arg1)
}

// UpdateCartItemQty mocks base method.
func (m *MockStore) UpdateCartItemQty(arg0 context.Context, arg1 db.UpdateCartItemQtyParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItemQty", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItemQty indicates an expected call of UpdateCartItemQty.
func (mr *MockStoreMockRecorder) UpdateCartItemQty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItemQty", reflect.TypeOf((*MockStore)(nil).UpdateCartItemQty), arg0, arg1)
}

// UpdateCollection mocks base method.
func (m *MockStore) UpdateCollection(arg0 context.Context, arg1 db.UpdateCollectionParams) (db.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollection", arg0, arg1)
	ret0, _ := ret[0].(db.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection.
func (mr *MockStoreMockRecorder) UpdateCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockStore)(nil).UpdateCollection), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserVerificationCode mocks base method.
func (m *MockStore) UpdateUserVerificationCode(arg0 context.Context, arg1 db.UpdateUserVerificationCodeParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserVerificationCode", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserVerificationCode indicates an expected call of UpdateUserVerificationCode.
func (mr *MockStoreMockRecorder) UpdateUserVerificationCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserVerificationCode", reflect.TypeOf((*MockStore)(nil).UpdateUserVerificationCode), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
